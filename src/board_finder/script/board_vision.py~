#!/usr/bin/env python

import cv2
import numpy as np
import math
from matplotlib.pyplot import *
from collections import defaultdict
from Board import *
from LineSegment import *
from Point import *
from Cluster import *

angleRange = 5				
			
#cos angle from dot product of three points
def angle_cos(p0, p1, p2):
    d1, d2 = (p0-p1).astype('float'), (p2-p1).astype('float')
    return abs( np.dot(d1, d2) / np.sqrt( np.dot(d1, d1)*np.dot(d2, d2) ) )

#finds all square like polynomials from edge map image
def detectSquares(edges):
	squares = []
	contours, hierarchy = cv2.findContours(edges, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)

	#each contour is fitted to an approximate polynomial
	#a square has 4 points, perimeter close to original contour,
	#is convex, and has angles close to 90
	for cnt in contours:
		cnt_len = cv2.arcLength(cnt, True)
		cnt = cv2.approxPolyDP(cnt, 0.025*cnt_len, True)
		if len(cnt) == 4 and cv2.contourArea(cnt) > 15 and cv2.isContourConvex(cnt):
			cnt = cnt.reshape(-1, 2)
			max_cos = np.max([angle_cos( cnt[i], cnt[(i+1) % 4], cnt[(i+2) % 4] ) for i in xrange(4)])
			if max_cos < 0.5:
				squares.append(cnt)
				
	return squares


#main function for detecting the tic tac toe board and all objects
#within it
def detectBoard(img, name=None):

	if(name != None):
		img = cv2.imread(name)

	#convert to gray and use canny edge detector to get an edge map
	gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
	edges = cv2.Canny(gray,75,160,apertureSize = 3)
	 
	temp = np.copy(edges)

	#find all squares in the image
	squares = detectSquares(temp)
                      
	if(squares == None):
		print('did not find any squares')
		return None

	#for testing
	imgcopy = np.copy(img)
	imgcopy2 = np.copy(img)
	imgcopy3 = np.copy(img)

	#find the tic tac toe board from all squares in the image
	outer, inner = isolateBoardSquares(squares)

	#create a new tic tac toe board object from the squares
	board = Board(outer, inner)
	print('board created')
	
	maxRad = 0
	if(board.innerSquares == None):
		return None
		
	#max radius used for proximity detection of O's and X's
	for square in board.innerSquares:
		maxRad += getLongestDimension(square)
	maxRad = maxRad / len(board.innerSquares)
	maxRad = int((maxRad / 2) * 0.8)


	#detect circles using houghcircles
	circles = cv2.HoughCircles(edges, cv2.cv.CV_HOUGH_GRADIENT, 1, maxRad, param1=60, param2=30, minRadius=3, maxRadius=maxRad)
	
	if(circles == None):
		print ("no circles found")
	else:

		circles = np.uint16(np.around(circles))
		for i in circles[0,:]:
			cv2.circle(imgcopy, (i[0], i[1]), i[2], (0, 255, 0), 2)
			cv2.circle(imgcopy, (i[0], i[1]), 2, (0, 0, 255), 3)
		
		#set circles in board state
		board.setCircleLocations(circles, maxRad)
	
	
	minLineLength = 6
	maxLineGap = 2
	#find all lines in image using houghlines
	lines = cv2.HoughLinesP(edges,1,np.pi/180,15,minLineLength,maxLineGap)
	
	#detect X's from the hough lines
	xLocations = detectXs(board, lines, maxRad, imgcopy2)
	
	#set the X locations in the board state
	board.setXLocations(xLocations)

	return board

	
#find all X's inside the game board from hough lines
#find at least two angles greater than 41 degrees near
#the center of a game square
def detectXs(board, lines, maxRad, img):
	centers = board.getOpenCenters()
	centerMap = defaultdict(list)
	
	proximity = maxRad * .75
	
	xLocations = np.zeros(9)

	#create a hashmap of game board squares to all hough lines located within
	#the corresponding square
	for x1,y1,x2,y2 in lines[0]:
		p1 = Point(x1, y1)
		p2 = Point(x2, y2)
	
		for cluster, index in centers:
			
			if(cluster.centerFound == False):
				if(p1.getDistance(cluster.center) <= maxRad or p2.getDistance(cluster.center) <= maxRad):
					centerMap[index].append(LineSegment(p1, p2))
			else:
				if(p1.getDistance(cluster.center) <= proximity or p2.getDistance(cluster.center) <= proximity):
					centerMap[index].append(LineSegment(p1, p2))
					break;
				
	
	minDist = 7 #minimum distance between ends of lines 
	minAngle = 41 #minimum angle between hough lines
	
	for center, lines in centerMap.iteritems():
		
		otherLines = lines[:]
		index = 0
		count = 0
		#check that two hough lines are within mindist and have an angle
		#greater than minAngle if find 2 within the same square, it is an X
		for line in lines:
			del otherLines[index]
			
			for otherLine in otherLines:
				if(line.point1.getDistance(otherLine.point1) <= minDist or
					line.point1.getDistance(otherLine.point2) <= minDist or
					line.point2.getDistance(otherLine.point1) <= minDist or
					line.point2.getDistance(otherLine.point2) <= minDist):
					
					if(line.getAngleDif(otherLine) > minAngle):
						count += 1
						if(count == 2):
							break;
						
			if(count == 2):
				break;
				
		if(count == 2):
			xLocations[center] = 2
			
	return xLocations
			
				
	
	
def getLongestDimension(square):
	p1 = Point(square[0][0], square[0][1])
	p2 = Point(square[1][0], square[1][1])
	p3 = Point(square[2][0], square[2][1])
	p4 = Point(square[3][0], square[3][1])
	
	dist = p1.getDistance(p2)
	dist = max(dist, p2.getDistance(p3))
	dist = max(dist, p3.getDistance(p4))
	dist = max(dist, p4.getDistance(p1))
	
	return dist
	


def getIntersection(line1, line2):
	slope1 = line1.getSlope()
	slope2 = line2.getSlope()
	yInt1 =	line1.getYIntercept()
	yInt2 = line2.getYIntercept()
	
	if(slope1 == None):	
		assert slope2 != None
		x = line1.point1.x
		y = slope2*x + yInt2
	elif(slope2 == None):
		assert slope1 != None
		x = line2.point1.x
		y = slope1*x + yInt1
	else:
		x = float(yInt1 - yInt2) / float(slope2 - slope1)
		y = slope1*x + yInt1

	return x, y


def area(square):
	width = abs(square[1][0]  - square[0][0])
	length = abs(square[2][1] - square[1][1])
	return float(width * length)


def containsNineSquares(outersquare, squares):
	count = 0
	for square in squares:
		if(contains(outersquare, square)):
			count += 1
	if(count >= 9):
		return True
	else:
		return False
			

def contains(square1, square2):
	xtick = 0
	ytick = 0
	for point1 in square1:
		for point2 in square2:
			if(point2[0] > point1[0]):
				xtick += 1
			else:
				xtick -= 1
		
			if(point2[1] > point1[1]):
				ytick += 1
			else:
				ytick -= 1
		

	if((xtick == 0 and ytick <= 2) or (ytick == 0 and xtick <= 2)):
		return True
	
	return False

def isolateBoardSquares(squares):
	arealimit = 10000
	biggest = None
	index = 0
	for square in squares:
		size = area(square)
		
		if(biggest == None):
			biggest = (square, size, index)
		else:
			if(size > biggest[1]):
				biggest = (square, size, index)
				
		index += 1
		
	if(biggest == None or biggest[1] < arealimit):
		return None, None
		
	del squares[biggest[2]]
	print('biggest')
	print(biggest[0], biggest[1], biggest[2])
	if(len(squares) < 9):
		return None, None
		
	indexes = []
	if(containsNineSquares(biggest[0], squares) == False):
		print('does not have 9 squares')
		return isolateBoardSquares(squares)
	else:
		index = 0
		for square in squares:
			if(contains(biggest[0], square) == False):
				indexes.append(index)
			index += 1
		print indexes

		tempSquares = []
		for i in range(0,len(squares)):
			if i not in indexes:
				tempSquares.append(squares[i])
				
			
		index = 0
		area 
		for square in tempSquares:
			newSquares = tempSquares[:]
			del newSquares[index]
			if(containsNineSquares(square, newSquares)):
				if(area(square) > arealimit):
					print 'another square contains nine'
					return isolateBoardSquares(tempSquares)
			index += 1
			
		return biggest[0], squares
		

		
		


if __name__ == '__main__':
	img = 'kinect_image.png'
	img = 'image.png'
	board = detectBoard(None, img)
	print board.boardState

	
